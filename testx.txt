def number_to_words(num):
    if num < 0:
        return "Âm " + number_to_words(-num)
    if num == 0:
        return "Không đồng"

    units = ["", "nghìn", "triệu", "tỷ", "nghìn tỷ"]
    digits = ["", "một", "hai", "ba", "bốn", "năm", "sáu", "bảy", "tám", "chín"]
    tens = ["", "mười", "hai mươi", "ba mươi", "bốn mươi", "năm mươi", "sáu mươi", "bảy mươi", "tám mươi", "chín mươi"]

    words = []
    group_index = 0

    # Chia số thành từng nhóm ba chữ số
    while num > 0:
        part = num % 1000
        if part > 0:
            part_words = []
            hundreds = part // 100
            if hundreds > 0:
                part_words.append(digits[hundreds] + " trăm")
            tens_place = (part % 100) // 10
            units_place = part % 10
            
            if tens_place > 0:
                if tens_place == 1 and hundreds > 0:
                    part_words.append("mười")  # "mười" khi có trăm
                else:
                    part_words.append(tens[tens_place])  # "hai mươi", "ba mươi", v.v.
                    
            if units_place > 0:
                part_words.append(digits[units_place])
                
            part_words.append(units[group_index])
            words.insert(0, " ".join(part_words))
        
        num //= 1000
        group_index += 1

    result =  " ".join(words).strip() + " đồng"
    # Tạo danh sách từ kết quả
    word_map = {
        "một": "10",
        "hai": "9",
        "ba": "8",
        "bốn": "15",
        "năm": "3",
        "sáu": "2",
        "bảy": "4",
        "tám": "0",
        "chín": "16",
        "mười": "6",
        "nghìn": "14",
        "mươi": "11",
        "trăm": "12",
        "triệu": "1",
        "tỷ": "7",
        "đồng": "17",
        "0": "5",
        "Bandanhanduoc": "13"
    }

    # Tách kết quả thành danh sách
    result_list = result.split()

    # Thêm các giá trị số vào danh sách
    for i, word in enumerate(result_list):
        if word in word_map:
            result_list[i] = word_map[word]

    return result_list


#In order ror this example-code to work, make sure you have a
#card with at least one folder, containing at least two mp3:s.
#The folders should be named 01, 02 etc and files should be named
#001.mp3, 002.mp3 etc.
from utime import sleep_ms, sleep
#from time import  sleep
from picodfplayer import DFPlayer


#Constants. Change these if DFPlayer is connected to other pins.
UART_INSTANCE=1
TX_PIN = 8
RX_PIN=9
BUSY_PIN=6

#Create player instance
player=DFPlayer(UART_INSTANCE, TX_PIN, RX_PIN)#, BUSY_PIN)


#Check if player is busy.
#print('Playing?', player.queryBusy())
#Play the first song (001.mp3) from the first folder (01)
#player.playMP3(1)

player.setVolume(28)

try:
    #number = int(input("Nhập một số: "))
    result = number_to_words(1000000000)

    player.playByIndex(14)
    sleep(0.95)
    for i in result:
        player.playByIndex(int(i)+1)
        sleep(0.22)
    #number = int(input("Nhập một số: "))
    result = number_to_words(100000)

    player.playByIndex(14)
    sleep(0.95)
    for i in result:
        player.playByIndex(int(i)+1)
        sleep(0.22)
    print(result)

except ValueError:
    print("Vui lòng nhập một số nguyên hợp lệ.")
    
# [8,Trieu, 6,5,7,0,10, ty,3, 2,1,muoi,tram,bandanhanduoc, nghin, 4 , 9, dong]

sleep(5)
print('Reset play')
player.reset()

from machine import Pin, UART
import time
uart = UART(0, baudrate=9600, tx=Pin(12), rx=Pin(13))

# Function to send data
def send_data(data):
    uart.write(data + '\n')

# Main loop
while True:
    if uart.any():
        received = str(uart.read())
        result = received.split('\\')[0].split('\'')[1]
        print("Received:", result)
    
    # Send a test message
    send_data("Hello from Pico!")
    time.sleep(2)


'''
print('Playing track 001.mp3 in folder 01')
player.playTrack(2,2)
#Wait 5 seconds...
sleep(5)

#Pause
print('Pausing')
player.pause()

#Wait 2 seconds...
sleep(2)

#Resume
print('Resuming play')
player.resume()

#Wait 5 seconds
sleep(5)

#Next Track
print('Skipping to next track')
player.nextTrack()

#Wait 5 seconds
sleep(5)
print('Reset play')
player.reset()
sleep(5)
#Pause by directly sending the pause  (0x0E) command to the command line and printing the output.
#print('Pausing by sending the pause command manually, and printing the output')
#print(str(player.sendcmd(0x0E, 0x00, 0x00)))

#print('You can try me out by sending commands in the console, such as player.resume()')
'''

